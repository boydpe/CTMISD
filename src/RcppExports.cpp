// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_time
NumericMatrix get_time(NumericVector times);
RcppExport SEXP _CTMISD_get_time(SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_time(times));
    return rcpp_result_gen;
END_RCPP
}
// init_p0
NumericMatrix init_p0(NumericVector times);
RcppExport SEXP _CTMISD_init_p0(SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(init_p0(times));
    return rcpp_result_gen;
END_RCPP
}
// calc_br
double calc_br(NumericMatrix p0, NumericVector times);
RcppExport SEXP _CTMISD_calc_br(SEXP p0SEXP, SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_br(p0, times));
    return rcpp_result_gen;
END_RCPP
}
// calc_br_nonstat
NumericMatrix calc_br_nonstat(NumericMatrix p0, NumericVector times, double z, NumericMatrix tau);
RcppExport SEXP _CTMISD_calc_br_nonstat(SEXP p0SEXP, SEXP timesSEXP, SEXP zSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type times(timesSEXP);
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_br_nonstat(p0, times, z, tau));
    return rcpp_result_gen;
END_RCPP
}
// calc_d
NumericVector calc_d(NumericMatrix dist_mat2, int np);
RcppExport SEXP _CTMISD_calc_d(SEXP dist_mat2SEXP, SEXP npSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dist_mat2(dist_mat2SEXP);
    Rcpp::traits::input_parameter< int >::type np(npSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_d(dist_mat2, np));
    return rcpp_result_gen;
END_RCPP
}
// get_pix
NumericVector get_pix(NumericVector x_grid, NumericVector y_grid, NumericVector lat, NumericVector lon, NumericVector x_pix, NumericVector y_pix);
RcppExport SEXP _CTMISD_get_pix(SEXP x_gridSEXP, SEXP y_gridSEXP, SEXP latSEXP, SEXP lonSEXP, SEXP x_pixSEXP, SEXP y_pixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x_grid(x_gridSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_grid(y_gridSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lat(latSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_pix(x_pixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_pix(y_pixSEXP);
    rcpp_result_gen = Rcpp::wrap(get_pix(x_grid, y_grid, lat, lon, x_pix, y_pix));
    return rcpp_result_gen;
END_RCPP
}
// calc_tau
NumericMatrix calc_tau(NumericVector x_pix, NumericVector y_pix, NumericMatrix p0, NumericVector di, NumericVector lon, NumericVector lat, NumericVector times);
RcppExport SEXP _CTMISD_calc_tau(SEXP x_pixSEXP, SEXP y_pixSEXP, SEXP p0SEXP, SEXP diSEXP, SEXP lonSEXP, SEXP latSEXP, SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x_pix(x_pixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_pix(y_pixSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type di(diSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lat(latSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_tau(x_pix, y_pix, p0, di, lon, lat, times));
    return rcpp_result_gen;
END_RCPP
}
// get_h
NumericMatrix get_h(NumericMatrix p0, NumericMatrix dist_mat, NumericMatrix dist_ints, int n_ints);
RcppExport SEXP _CTMISD_get_h(SEXP p0SEXP, SEXP dist_matSEXP, SEXP dist_intsSEXP, SEXP n_intsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dist_mat(dist_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dist_ints(dist_intsSEXP);
    Rcpp::traits::input_parameter< int >::type n_ints(n_intsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_h(p0, dist_mat, dist_ints, n_ints));
    return rcpp_result_gen;
END_RCPP
}
// get_g
NumericMatrix get_g(NumericMatrix p0, NumericMatrix time_mat, NumericMatrix time_ints, int n_ints);
RcppExport SEXP _CTMISD_get_g(SEXP p0SEXP, SEXP time_matSEXP, SEXP time_intsSEXP, SEXP n_intsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type time_mat(time_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type time_ints(time_intsSEXP);
    Rcpp::traits::input_parameter< int >::type n_ints(n_intsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_g(p0, time_mat, time_ints, n_ints));
    return rcpp_result_gen;
END_RCPP
}
// update_p
NumericMatrix update_p(NumericMatrix p0, NumericMatrix dist_mat, NumericVector br, NumericVector predg, NumericVector predh, NumericVector predk, int sp);
RcppExport SEXP _CTMISD_update_p(SEXP p0SEXP, SEXP dist_matSEXP, SEXP brSEXP, SEXP predgSEXP, SEXP predhSEXP, SEXP predkSEXP, SEXP spSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dist_mat(dist_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type br(brSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type predg(predgSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type predh(predhSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type predk(predkSEXP);
    Rcpp::traits::input_parameter< int >::type sp(spSEXP);
    rcpp_result_gen = Rcpp::wrap(update_p(p0, dist_mat, br, predg, predh, predk, sp));
    return rcpp_result_gen;
END_RCPP
}
// check_p
double check_p(NumericMatrix p0, NumericMatrix p);
RcppExport SEXP _CTMISD_check_p(SEXP p0SEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(check_p(p0, p));
    return rcpp_result_gen;
END_RCPP
}
// get_theta
NumericVector get_theta(NumericVector min_int, NumericVector max_int, NumericMatrix diff_mat, NumericMatrix p0, bool mark_check);
RcppExport SEXP _CTMISD_get_theta(SEXP min_intSEXP, SEXP max_intSEXP, SEXP diff_matSEXP, SEXP p0SEXP, SEXP mark_checkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type min_int(min_intSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type max_int(max_intSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type diff_mat(diff_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< bool >::type mark_check(mark_checkSEXP);
    rcpp_result_gen = Rcpp::wrap(get_theta(min_int, max_int, diff_mat, p0, mark_check));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CTMISD_get_time", (DL_FUNC) &_CTMISD_get_time, 1},
    {"_CTMISD_init_p0", (DL_FUNC) &_CTMISD_init_p0, 1},
    {"_CTMISD_calc_br", (DL_FUNC) &_CTMISD_calc_br, 2},
    {"_CTMISD_calc_br_nonstat", (DL_FUNC) &_CTMISD_calc_br_nonstat, 4},
    {"_CTMISD_calc_d", (DL_FUNC) &_CTMISD_calc_d, 2},
    {"_CTMISD_get_pix", (DL_FUNC) &_CTMISD_get_pix, 6},
    {"_CTMISD_calc_tau", (DL_FUNC) &_CTMISD_calc_tau, 7},
    {"_CTMISD_get_h", (DL_FUNC) &_CTMISD_get_h, 4},
    {"_CTMISD_get_g", (DL_FUNC) &_CTMISD_get_g, 4},
    {"_CTMISD_update_p", (DL_FUNC) &_CTMISD_update_p, 7},
    {"_CTMISD_check_p", (DL_FUNC) &_CTMISD_check_p, 2},
    {"_CTMISD_get_theta", (DL_FUNC) &_CTMISD_get_theta, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_CTMISD(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
